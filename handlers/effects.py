from aiogram import Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
from fsm.states import VideoEffectStates

router = Router()

# –î–æ—Å—Ç—É–ø–Ω—ñ –µ—Ñ–µ–∫—Ç–∏
EFFECTS = {
    "glasses": "üï∂Ô∏è Glasses",
    "explosion": "üí• Explosion",
    "laugh": "üòÇ Laughing",
    "hearts": "‚ù§Ô∏è Hearts"
}

@router.message(StateFilter(VideoEffectStates.ChoosingEffect))
async def prompt_effect_choice(message: Message):
    builder = InlineKeyboardBuilder()
    for key, name in EFFECTS.items():
        builder.button(text=name, callback_data=f"effect:{key}")
    builder.adjust(2)  # –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥

    await message.answer("–û–±–µ—Ä—ñ—Ç—å –µ—Ñ–µ–∫—Ç –¥–ª—è –Ω–∞–∫–ª–∞–¥–µ–Ω–Ω—è –Ω–∞ –≤—ñ–¥–µ–æ:", reply_markup=builder.as_markup())


@router.callback_query(StateFilter(VideoEffectStates.ChoosingEffect))
async def handle_effect_choice(callback: CallbackQuery, state: FSMContext):
    if not callback.data.startswith("effect:"):
        return

    effect_key = callback.data.split(":", 1)[1]
    if effect_key not in EFFECTS:
        await callback.answer("–ù–µ–≤—ñ–¥–æ–º–∏–π –µ—Ñ–µ–∫—Ç", show_alert=True)
        return

    await state.update_data(chosen_effect=effect_key)
    await callback.answer(f"–û–±—Ä–∞–Ω–æ –µ—Ñ–µ–∫—Ç: {EFFECTS[effect_key]}")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É —ñ–Ω—Ç—Ä–æ/–∞—É—Ç—Ä–æ
    await state.set_state(VideoEffectStates.ChoosingAddonType)
    await callback.message.answer("–ß–∏ –±–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ —ñ–Ω—Ç—Ä–æ –∞–±–æ –∞—É—Ç—Ä–æ –¥–æ –≤—ñ–¥–µ–æ?")
