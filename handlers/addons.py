import os
from aiogram import Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardMarkup, InlineKeyboardButton

from config import TEMP_DIR, INTROS_DIR, OUTROS_DIR
from fsm.states import VideoEffectStates

router = Router()


@router.message(StateFilter(VideoEffectStates.ChoosingAddonType))
async def prompt_addon_type(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –Ü–Ω—Ç—Ä–æ", callback_data="addon:intro"),
         InlineKeyboardButton(text="‚ûï –ê—É—Ç—Ä–æ", callback_data="addon:outro")],
        [InlineKeyboardButton(text="üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data="addon:none")]
    ])
    await message.answer("–ß–∏ –±–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ —ñ–Ω—Ç—Ä–æ –∞–±–æ –∞—É—Ç—Ä–æ –¥–æ –≤—ñ–¥–µ–æ?", reply_markup=keyboard)


@router.callback_query(StateFilter(VideoEffectStates.ChoosingAddonType))
async def handle_addon_type(callback: CallbackQuery, state: FSMContext):
    if not callback.data.startswith("addon:"):
        return
    addon = callback.data.split(":")[1]
    await state.update_data(addon_type=addon)
    await callback.answer(f"–û–±—Ä–∞–Ω–æ: {addon}")

    if addon == "none":
        await state.set_state(VideoEffectStates.Processing)
        await callback.message.answer("–û–±—Ä–æ–±–ª—è—é –≤—ñ–¥–µ–æ –±–µ–∑ —ñ–Ω—Ç—Ä–æ –∞–±–æ –∞—É—Ç—Ä–æ...")
    else:
        await state.set_state(VideoEffectStates.ChoosingAddonSource)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÅ –ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞", callback_data="source:library"),
             InlineKeyboardButton(text="üì§ –ú–æ—î –≤—ñ–¥–µ–æ", callback_data="source:custom")]
        ])
        await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å –¥–∂–µ—Ä–µ–ª–æ –¥–ª—è —ñ–Ω—Ç—Ä–æ/–∞—É—Ç—Ä–æ:", reply_markup=keyboard)


@router.callback_query(StateFilter(VideoEffectStates.ChoosingAddonSource))
async def handle_addon_source(callback: CallbackQuery, state: FSMContext):
    if not callback.data.startswith("source:"):
        return
    source = callback.data.split(":")[1]
    await state.update_data(addon_source=source)
    await callback.answer(f"–î–∂–µ—Ä–µ–ª–æ: {source}")

    if source == "custom":
        await state.set_state(VideoEffectStates.WaitingForAddonVideo)
        await callback.message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—î –≤—ñ–¥–µ–æ (–¥–æ 10 —Å–µ–∫, MP4, 1:1)...")
    else:
        # –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤ –∑ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏
        data = await state.get_data()
        addon_type = data.get("addon_type")
        folder = INTROS_DIR if addon_type == "intro" else OUTROS_DIR
        video_files = [f for f in os.listdir(folder) if f.lower().endswith(".mp4")]

        if not video_files:
            await callback.message.answer("–£ –±—ñ–±–ª—ñ–æ—Ç–µ—Ü—ñ –Ω–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤—ñ–¥–µ–æ.")
            return

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=video.split("_", 1)[-1].replace(".mp4", "").capitalize(),
                callback_data=f"lib:{video}"
            )] for video in video_files
        ])

        await state.set_state(VideoEffectStates.ChoosingAddonFromLibrary)
        await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å —ñ–Ω—Ç—Ä–æ/–∞—É—Ç—Ä–æ –∑ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏:", reply_markup=keyboard)


@router.callback_query(StateFilter(VideoEffectStates.ChoosingAddonFromLibrary))
async def choose_library_addon(callback: CallbackQuery, state: FSMContext):
    if not callback.data.startswith("lib:"):
        return
    filename = callback.data.split(":", 1)[1]

    data = await state.get_data()
    addon_type = data.get("addon_type")
    folder = INTROS_DIR if addon_type == "intro" else OUTROS_DIR

    full_path = os.path.join(folder, filename)
    if not os.path.exists(full_path):
        await callback.message.answer("–ü–æ–º–∏–ª–∫–∞: —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    await state.update_data(addon_path=full_path)
    await state.set_state(VideoEffectStates.Processing)
    await callback.answer("–í—ñ–¥–µ–æ –∑ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ –æ–±—Ä–∞–Ω–æ.")
    await callback.message.answer("–û–±—Ä–æ–±–ª—è—é –≤—ñ–¥–µ–æ –∑ –≤–∏–±—Ä–∞–Ω–∏–º –¥–æ–¥–∞—Ç–∫–æ–º...")


@router.message(StateFilter(VideoEffectStates.WaitingForAddonVideo))
async def receive_custom_addon(message: Message, state: FSMContext):
    if not message.video:
        await message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤—ñ–¥–µ–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ MP4 (–¥–æ 10 —Å–µ–∫, 1:1)...")
        return

    file_id = message.video.file_id
    tg_file = await message.bot.get_file(file_id)
    os.makedirs(TEMP_DIR, exist_ok=True)
    save_path = os.path.join(TEMP_DIR, f"addon_{file_id}.mp4")
    await message.bot.download_file(tg_file.file_path, save_path)

    await state.update_data(addon_path=save_path)
    await state.set_state(VideoEffectStates.Processing)
    await message.answer("‚úÖ –î–æ–¥–∞—Ç–∫–æ–≤–µ –≤—ñ–¥–µ–æ –æ—Ç—Ä–∏–º–∞–Ω–æ. –ü–æ—á–∏–Ω–∞—é –æ–±—Ä–æ–±–∫—É...")
